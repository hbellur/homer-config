#!KAMAILIO

/* Parameters for Homer */
#!substdef "!HOMER_DB_USER!sipcapture_rw!g"
#!substdef "!HOMER_DB_PASSWORD!sipcapture!g"
#!substdef "!HOMER_DB_HOST!127.0.0.1!g"
#!substdef "!HOMER_DB_PORT!3306!g"
#!substdef "!HOMER_LISTEN_PROTO!udp!g"
#!substdef "!HOMER_LISTEN_IF!0.0.0.0!g"
##!substdef "!HOMER_LISTEN_IF!127.0.0.1!g"
#!substdef "!HOMER_LISTEN_PORT!9060!g"

/* Parameters for Elasticsearch */
#!substdef "!ELASTICSEARCH_HTTP_URL!http://127.0.0.1:9200!g"

/* Parameters for Graylog */
#!substdef "!GRAYLOG_GELF_HTTP_URL!http://127.0.0.1:12201!g"

/* Parameters for InfluxDB */
#!substdef "!INFLUXDB_HTTP_URL!http://127.0.0.1:8086!g"
#!substdef "!INFLUXDB_DB!homer!g"
#!substdef "!INFLUXDB_PRECISION!u!g"
#!substdef "!INFLUXDB_RETENTION!autogen!g"

/* Parameters for the rtimer module. How often (seconds) stats will be send. */
#!substdef "!CHECK_STATS_INTERVAL!10!g"

/* Parameters for the htable module. */
#!substdef "!HTABLE_AUTOEXPIRE!300!g"

/* Parameters for custom log levels. */
#!substdef "!HTTP_LOG_LEVEL!L_NOTICE!g"
#!substdef "!HEP_LOG_LEVEL!L_NOTICE!g"

#!substdef "!MAX_WHILE_LOOPS!10000!g"
#!substdef "!SIP_INSERT_CHILD!1!g"
#!substdef "!STATS_INSERT_CHILD!1!g"
#!substdef "!MAX_BUFFER_LENGTH!65535!g"
/* Define the functions you need here */
########################################

##!define 	DO_ELASTICSEARCH
##!define 	DO_GRAYLOG
##!define 	DO_INFLUXDB
##!define 	DO_MYSQL_STATS
##!define 	DO_GEO
##!define 	DO_ISUP
##!define 	DO_KAMSTAT
##!define 	DO_KPI
##!define 	DO_MALICIOUS
##!define 	DO_METHOD
##!define 	DO_REGERR
##!define 	DO_RESPONSE
##!define 	DO_RTCP
##!define 	DO_RTCPXR
##!define 	DO_USERAGENT
##!define 	DO_XHTTP
##!define 	DO_XRTP
##!define 	DO_4xx
##!define 	DO_5xx

########################################

listen          = HOMER_LISTEN_PROTO:HOMER_LISTEN_IF:HOMER_LISTEN_PORT
#mpath           = "/usr/lib/x86_64-linux-gnu/kamailio/modules/"
mpath           = "/usr/lib64/kamailio/modules/"
debug           = -2
maxbuffer       = 134217728
pv_buffer_slots = 128
pv_buffer_size  = MAX_BUFFER_LENGTH
shm_force_alloc = yes
mlock_pages     = yes
max_while_loops = MAX_WHILE_LOOPS
log_stderror    = no
log_facility    = LOG_LOCAL1
fork            = yes
children        = 16
memdbg          = 5
memlog          = 5

/* Load all the modules we need here */
loadmodule "tm.so"
loadmodule "ctl.so"
loadmodule "mqueue.so"
loadmodule "htable.so"
loadmodule "ipops.so"
loadmodule "jansson.so"
loadmodule "kex.so"
loadmodule "pv.so"
loadmodule "rtimer.so"
loadmodule "siputils.so"
loadmodule "sl.so"
loadmodule "textops.so"
loadmodule "xlog.so"
loadmodule "avpops.so"


/* Configure htable module */
modparam("htable", "htable", "sipReqDedupMap=>size=16;autoexpire=5")
modparam("htable", "htable", "sipResDedupMap=>size=16;autoexpire=5")
modparam("htable", "htable", "statReqDedupMap=>size=16;autoexpire=180")
modparam("htable", "htable", "statResDedupMap=>size=16;autoexpire=180")
modparam("htable", "htable", "statCustom=>size=16;autoexpire=180")
modparam("htable", "htable", "cc=>size=16;autoexpire=600")

/* Configure mqueue module */
modparam("mqueue", "mqueue", "name=insert_queue")

/* Configure rtimer module */
modparam("rtimer", "timer", "name=ta;interval=CHECK_STATS_INTERVAL;mode=1;")
modparam("rtimer", "exec", "timer=ta;route=CHECK_STATS")
modparam("rtimer", "timer", "name=timer_sip_insert;interval=500000u;mode=SIP_INSERT_CHILD;")
modparam("rtimer", "exec", "timer=timer_sip_insert;route=INSERT")

/* Include the routing blocks you need here */
##############################################

/* These are mandatory */
include_file "hep.cfg"
include_file "http.cfg"


#!ifdef DO_GEO
include_file "geo.cfg"
#!endif

#!ifdef DO_ISUP
include_file "isup.cfg"
#!endif

#!ifdef DO_KAMSTAT
include_file "kamstat.cfg"
#!endif

#!ifdef DO_KPI
include_file "kpi.cfg"
#!endif

#!ifdef DO_MALICIOUS
include_file "malicious.cfg"
#!endif

#!ifdef DO_METHOD
include_file "method.cfg"
#!endif

#!ifdef DO_REGERR
include_file "regerr.cfg"
#!endif

#!ifdef DO_RESPONSE
include_file "response.cfg"
#!endif

#!ifdef DO_RTCP
include_file "rtcp.cfg"
#!endif

#!ifdef DO_RTCPXR
include_file "rtcpxr.cfg"
#!endif

#!ifdef DO_USERAGENT
include_file "useragent.cfg"
#!endif

#!ifdef DO_XHTTP
include_file "xhttp.cfg"
#!endif

#!ifdef DO_XRTP
include_file "xrtp.cfg"
#!endif

#!ifdef DO_4xx
include_file "4xx.cfg"
#!endif

#!ifdef DO_5xx
include_file "5xx.cfg"
#!endif


##############################################

/* Main SIP request routing logic - processing of any incoming SIP request starts with this route */
request_route {

	#Packets
	if($sht(statCustom=>packet::count) == $null) $sht(statCustom=>packet::count) = 0;
	if($sht(statCustom=>packet::size) == $null) $sht(statCustom=>packet::size) = 0;   
	$sht(statCustom=>packet::count) = $sht(statCustom=>packet::count) + 1;
	$sht(statCustom=>packet::size) = $sht(statCustom=>packet::size) + $ml;

	/* Deduplicate messages. This could happen if you have many optical taps */
#	if ($sht(sipReqDedupMap=>$sel(@v[1].host)::$sel(@v[1].branch)::$ci::$cs::$rm)) {
#		drop;
#	}
#	$sht(sipReqDedupMap=>$sel(@v[1].host)::$sel(@v[1].branch)::$ci::$cs::$rm) = 1;

	/* Drop second request with same CallID and CSeq for stats but store all in DB */
	if ($sht(statReqDedupMap=>$rm::$cs::$ci) != $null) {
		route(STORE);
		drop;
	}
	$sht(statReqDedupMap=>$rm::$cs::$ci) = 1;

	/* Add your custom routes which process requests in realtime here */
	####################################################################

	#!ifdef DO_GEO
	route(GEO);
	#!endif

	#!ifdef DO_KPI
	route(KPI);
	#!endif

	#!ifdef DO_MALICIOUS
	route(MALICIOUS);
	#!endif

	#!ifdef DO_METHOD
	route(METHOD);
	#!endif

	#!ifdef DO_RTCPXR
	route(RTCPXR);
	#!endif

	#!ifdef DO_USERAGENT
	route(USERAGENT);
	#!endif

	#!ifdef DO_XRTP
	route(XRTP);
	#!endif

	####################################################################

	/* Store the requests */
	route(STORE);
	drop;
}

onreply_route {
	
	#Packets
	if($sht(statCustom=>packet::count) == $null) $sht(statCustom=>packet::count) = 0;
	if($sht(statCustom=>packet::size) == $null) $sht(statCustom=>packet::size) = 0;   
	$sht(statCustom=>packet::count) = $sht(statCustom=>packet::count) + 1;
	$sht(statCustom=>packet::size) = $sht(statCustom=>packet::size) + $ml;

	/* Deduplicate messages. This could happen if you have many optical taps */
#	if ($sht(sipResDedupMap=>$sel(@v[1].host)::$sel(@v[1].branch)::$ci::$cs::$rs)) {
#		drop;
#	}
#	$sht(sipResDedupMap=>$sel(@v[1].host)::$sel(@v[1].branch)::$ci::$cs::$rs) = 1;

	/* Drop second response with same CallID and CSeq for stats but store all in DB */
	if ($sht(statResDedupMap=>$rs::$cs::$rm::$ci) != $null) {
		route(STORE);
		drop;
	}
	$sht(statResDedupMap=>$rs::$cs::$rm::$ci) = 1;

	/* Add your custom routes which process responses in realtime here */
	#####################################################################

	#!ifdef DO_KPI
	route(KPI);
	#!endif

	#!ifdef DO_REGERR
	route(REGERR);
	#!endif

	#!ifdef DO_RESPONSE
	route(RESPONSE);
	#!endif

	#!ifdef DO_XRTP
	route(XRTP);
	#!endif

	#!ifdef DO_4xx
	route(FOURXX);
	#!endif

	#!ifdef DO_5xx
	route(FIVEXX);
	#!endif

	#####################################################################

	/* Store the responses */
	route(STORE);
	drop;
}

route[CHECK_STATS] {
	$var(host) = $HN(n);
	$var(influxdbHost) = "host=" + $var(host);

	$var(isoTime)      = $timef(%Y-%m-%dT%H:%M:%S);
	$var(unixTimeGen)  = $TS - 60;
	$var(unixTimeMic)  = $TV(u);
	$var(unixTimeMil)  = $var(unixTimeMic)/1000;
	$var(elasticTime)  = $_s($var(isoTime).$var(unixTimeMil)Z);
	$var(graylogTime)  = $_s($var(unixTimeGen).$var(unixTimeMil));
	$var(influxdbTime) = $_s($var(unixTimeGen)$var(unixTimeMic));
	
	/* Add your custom routes which periodically generate stats from maps here */
	#############################################################################

	#!ifdef DO_GEO
	route(STATS_GEO);
	#!endif

	#!ifdef DO_KAMSTAT
	route(STATS_KAMAILIO);
	#!endif

	#!ifdef DO_KPI
	route(STATS_KPI);
	#!endif

	#!ifdef DO_MALICIOUS
	route(STATS_MALICIOUS);
	#!endif

	#!ifdef DO_METHOD
	route(STATS_METHOD);
	#!endif

	#!ifdef DO_REGERR
	route(STATS_REGERR);
	#!endif

	#!ifdef DO_RESPONSE
	route(STATS_RESPONSE);
	route(STATS_RESPONSE_METHOD);
	#!endif

	#!ifdef DO_USERAGENT
	route(STATS_USERAGENT);
	#!endif

	#!ifdef DO_4xx
	route(STATS_4xx);
	#!endif

	#!ifdef DO_5xx
	route(STATS_5xx);
	#!endif

	#############################################################################
}

route[SIP_2_JSON] {
        
        $var(payload) = 0;
	
	jansson_set("integer", "timestamp", "$var(time_sec)", "$var(payload)");
	jansson_set("integer", "hep_protocol", "1", "$var(payload)");
	jansson_set("string", "protocol", "sip", "$var(payload)");
	
        jansson_set("string", "method", "$rm", "$var(payload)");
        jansson_set("string", "reply_reason", "$rr", "$var(payload)");
        jansson_set("string", "ruri", "$ru", "$var(payload)");
        jansson_set("string", "ruri_user", "$rU", "$var(payload)");
        jansson_set("string", "ruri_domain", "$rd", "$var(payload)");
        jansson_set("string", "from_user", "$fU", "$var(payload)");
        jansson_set("string", "from_domain", "$(fu{nameaddr.uri}{uri.domain})", "$var(payload)");
        jansson_set("string", "from_tag", "$ft", "$var(payload)");
        jansson_set("string", "to_user", "$tU", "$var(payload)");
        jansson_set("string", "to_domain", "$(tu{nameaddr.uri}{uri.domain})", "$var(payload)");
        jansson_set("string", "to_tag", "$tt", "$var(payload)");
        jansson_set("string", "pid_user", "$(ai{uri.user})", "$var(payload)");
        jansson_set("string", "contact_user", "$(ct{nameaddr.uri}{uri.user})", "$var(payload)");
        jansson_set("string", "contact_ip", "$(ct{nameaddr.uri}{uri.host})", "$var(payload)");
        jansson_set("string", "contact_port", "$(ct{nameaddr.uri}{uri.port})", "$var(payload)");
        jansson_set("string", "auth_user", "$au", "$var(payload)");
        jansson_set("string", "callid", "$ci", "$var(payload)");
        jansson_set("string", "callid_aleg", "$ci", "$var(payload)");
        $var(via_1) = $sel(via[1]);
        $var(via_1_branch) = $sel(via[1].branch);
        jansson_set("string", "via_1", "$var(via_1)", "$var(payload)");
        jansson_set("string", "via_1_branch", "$var(via_1_branch)", "$var(payload)");
        jansson_set("string", "cseq", "$cs", "$var(payload)");
        jansson_set("string", "diversion", "$di", "$var(payload)");
        jansson_set("string", "reason", "$dir", "$var(payload)");
        jansson_set("string", "content_type", "$cT", "$var(payload)");
        jansson_set("string", "authorization", "$hdr(Authorization)", "$var(payload)");
        jansson_set("string", "user_agent", "$ua", "$var(payload)");
        jansson_set("string", "originator_ip", "", "$var(payload)");
        jansson_set("string", "originator_port", "", "$var(payload)");
        jansson_set("string", "rtp_stat", "$hdr(X-RTP-Stat)", "$var(payload)");
	
}

route[STORE] {

	route(SIP_2_JSON);

	if ($rm == "REGISTER") {
		$var(table) = "sip_capture_registration";
		$var(transaction) = "registration";
	}
	else if ($rm =~ "(INVITE|INFO|UPDATE|BYE|ACK|PRACK|REFER|CANCEL)$") {
		$var(transaction) = "call";
	}
	else if ($rm =~ "(NOTIFY)$" && is_present_hf("Event") && $hdr(Event)=~"refer;") {
		$var(transaction) = "call";
	}
	else {
		$var(transaction) = "rest";
	}

        jansson_set("string", "transaction", "$var(transaction)", "$var(payload)");
	
        /* Append the current day timestamp to the tables */
	$var(utc) = $utimef(%Y%m%d);
        $var(table) = "hep_proto_1_" + $var(transaction) + "_" + $var(utc);


        $var(homer_query_values) = "(10, '" + $utimef(%Y-%m-%d %H:%M:%S) + "', '" + $var(hep_header) +"', '" + $var(protocol_header) + "', '" + $var(payload) + "', '" + $msg(buf) + "')";

        if($sht(cc=>packet::count) == $null) $sht(cc=>packet::count) = 0;
        $sht(cc=>packet::count) = $sht(cc=>packet::count) + 1;

	mq_add("insert_queue", "$var(table)", "$var(homer_query_values)");
}

route[INSERT] {
	$var(current_qsize) = mq_size("insert_queue");
	if ($var(current_qsize) == -1) {
		$var(total_qsize) = 1;
		xlog("L_DBG","Insert count: $sht(cc=>packet::count) \n");
		$sht(cc=>packet::count) = 0;
	}
	$var(total_qsize) = $var(total_qsize) + $var(current_qsize);
        xlog("L_DBG","Enter insert_queue! Current queue size: $var(current_qsize), total queue count: $var(total_qsize) \n");
        
	$var(sql_query_statement) = "";

	$var(loop_count) = 1;
        while (mq_fetch("insert_queue") && $var(loop_count) < MAX_WHILE_LOOPS) {
		$var(table) = $mqk(insert_queue);
		if (!is_avp_set("$avp($var(table))")) {
                	xlog("L_DBG","Setting table <$var(table)>\n");
			$avp($var(table)) = "";
			$avp($pp-tables) = $var(table);
		}
		$var(sql_query_length) = $(avp($var(table)){s.len}) + $(mqv(insert_queue){s.len});
 		if ($var(sql_query_length) < (MAX_BUFFER_LENGTH-150)) {

                	xlog("L_DBG","Got one Queue Key in while loop <$mqk(insert_queue)>\n");
                	xlog("L_DBG","Got one Queue Value in while loop <$mqv(insert_queue)>\n");

                	$(avp($var(table))[0]) = $(avp($var(table))[0]) + $mqv(insert_queue) + ",";
		} else {
			$var(values) = $(avp($var(table))[0]);
			route(DB_INSERT);
                	$(avp($var(table))[0]) = $mqv(insert_queue) + ",";
		}
		$var(loop_count) = $var(loop_count) + 1;
		
        }

	while ($avp($pp-tables) != $null) {	
		$var(table) = $avp($pp-tables);
		$var(values) = $(avp($var(table))[0]);
		xlog("L_DBG","Flushing table $var(table)\n");
		route(DB_INSERT);
		$avp($pp-tables) = $null;
	}
}

route[DB_INSERT] { 
	$var(values) = $(var(values){s.striptail,1});
        $var(homer_query) = "INSERT INTO " + $var(table) + " (gid, create_date, hep_header, protocol_header, payload, raw) VALUES" + $var(values);
        xlog("L_DBG","homer_query length: $(var(homer_query){s.len})\n");

        sql_query("sqlhomer", "$var(homer_query)");

}

