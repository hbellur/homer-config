#################################################
#
#            HOMER & OpenSIPs
#
#################################################

log_level=2
log_stderror=no
log_name="sipcapture"
log_facility=LOG_LOCAL0

children=4

listen=hep_udp:*:9060
listen=hep_tcp:*:9060

mpath="/usr/local/lib64/opensips/modules/"

loadmodule "cfgutils.so"
loadmodule "signaling.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "sipmsgops.so"
loadmodule "mi_fifo.so"
loadmodule "uri.so"
loadmodule "db_mysql.so"
loadmodule "sipcapture.so"
loadmodule "proto_hep.so"
loadmodule "cachedb_local.so"
loadmodule "avpops.so"
loadmodule "mmgeoip.so"
loadmodule "exec.so"
loadmodule "json.so"
loadmodule "statistics.so"

#settings

### CHANGEME hep interface
# should be loaded After proto_hep

### Cache
modparam("cachedb_local", "cachedb_url", "local://")
modparam("cachedb_local", "cache_collections", "default=10")

#### Record Route Module
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### FIFO Management Interface

modparam("mi_fifo", "fifo_name", "/tmp/sipcapture_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### SIP MSG OPerationS module
#### URI module
#### MAX ForWarD module

modparam("uri", "use_uri_table", 0)

### CHANGEME mysql uri here if you do sip_capture()
modparam("sipcapture", "db_url", "mysql://homer_user:homer_password@localhost/homer_data")
modparam("sipcapture", "capture_on", 1)
modparam("sipcapture", "hep_capture_on", 1)
modparam("sipcapture", "hep_route", "my_hep_route")


### hep version here 1, 2 or 3
#modparam("proto_hep", "hep_version", 3)

#
modparam("avpops","db_url","mysql://homer_user:homer_password@localhost/homer_statistic")


modparam("mmgeoip", "mmgeoip_city_db_path", "/usr/share/GeoIP/GeoIP.dat")

modparam("statistics", "stat_groups", "method,packet,stats,stats_ip,stats_useragent,stats_geo, 
		alarm,response, message")

route {

	update_stat("method:TOTAL", "+1");
	update_stat("packet:count", "+1");
	update_stat("packet:size", "$ml");

	# XXX: isn't t_check_trans() more elegant/fast?
	if(cache_fetch("local","msg:$rm:$cs:$ci",$var(tmpvar))) {
		route(STORE);
		exit;
	}
	cache_store("local", "msg:$rm:$cs:$ci", "yes", 320);

	update_stat("method:ALL", "+1");
	if (is_method("INVITE") && has_totag())
		update_stat("method:$rm:1", "+1");
	else
		update_stat("method:$rm", "+1");

	if (is_method("INVITE|REGISTER")) {

		if($ua =~ "(friendly-scanner|sipvicious|sipcli)") {
			avp_db_query("INSERT INTO alarm_data_mem (create_date, type, total, source_ip, description) VALUES(NOW(), 'scanner', 1, '$si', 'Friendly scanner alarm!') ON DUPLICATE KEY UPDATE total=total+1");
			route(KILL_VICIOUS);
		}

		#IP Method
		update_stat("stats_ip:$rm:$si", "+1");

		#GEO
		if(mmg_lookup("lon:lat","$si","$avp(lat_lon)"))
			update_stat("stats_geo:$rm:$(avp(lat_lon)[3])", "+1");

		if ($adu != "" && $adu != NULL)
			update_stat("method:$rm::1", "+1");

		if($ua != "" && $ua != NULL)
			update_stat("stats_useragent:$ua:$rm", "+1");
	} else if (is_method("BYE")) {

		if (is_present_hf("Reason")) {
			$var(cause) = $(hdr(Reason){param.value,cause}{s.int});
			if($var(cause) != 16 && $var(cause) != 17)
				update_stat("stats:sdf", "+1");
		}

	} else if(is_method("PUBLISH")) {
		if(has_body("application/vq-rtcpxr") && $(rb{s.substr,0,1}) != "x") {
			$var(table) = "report_capture";
			$var(reg) = "/.*CallID:((\d|\-|\w|\@){5,120}).*$/\1/s";
			$var(callid) = $(rb{re.subst,$var(reg)});
			#Local IP. Only for stats
			report_capture("report_capture", "$var(callid)", "1");
			drop;
		}
	}

	#Store
	route(STORE);
	exit;

}

onreply_route {

	update_stat("method:TOTAL", "+1");

	if(cache_fetch("local","msg:$rs:$cs:$rm:$ci",$var(tmpvar))) {
		route(STORE);
		exit;
	}

	cache_store("local", "msg:$rs:$cs:$rm:$ci", "yes", 320);
	update_stat("method:ALL", "+1");

	if (status =~ "^4") {
		update_stat("stats:$rs", "+1");
		update_stat("alarm:$rs", "+1");
	} else if(status =~ "^(30[012])$")
		update_stat("stats:300", "+1");

	if (is_method("INVITE")) {
		#ISA
		if(status =~ "^(408|50[03])$") {
			update_stat("stats:isa", "+1");
		}
		#Bad486
		if(status =~ "^(486|487|603)$") {
			update_stat("stats:bad-invite", "+1");
		}

		#SD
		if(status =~ "^(50[034])$") {
			update_stat("stats:sd", "+1");
		}
	}
	if (is_method("BYE|INVITE"))
		update_stat("response:$rm:$rs", "+1");

	#Store
	route(STORE);
	drop;
}

route[KILL_VICIOUS] {
	xlog("Kill-Vicious ! si : $si ru : $ru ua : $ua\n");
	return;
}



timer_route[stats_alarms_update, 60] {

	route(CHECK_ALARM);
	#Check statistics
	route(CHECK_STATS);

}

route[SEND_ALARM] {
	exec('echo "Value: $var(thvalue), Type: $var(atype), Desc: $var(aname)" | mail -s "Homer Alarm $var(atype) - $var(thvalue)" $var(aemail) ') ;
}

route[CHECK_ALARM]
{

	#POPULATE ALARM THRESHOLDS
	#Homer 5 sql schema
	avp_db_query("SELECT type,value,name,notify,email FROM alarm_config WHERE NOW() between startdate AND stopdate AND active = 1", "$avp(type);$avp(value);$avp(name);$avp(notify);$avp(email)");
	$var(i) = 0;
	while ( $(avp(type)[$var(i)]) != NULL )
	{
		$var(atype) = $(avp(type)[$var(i)]);
		$var(avalue) = $(avp(value)[$var(i)]);
		$var(aname) = $(avp(name)[$var(i)]);
		$var(anotify) = $(avp(notify)[$var(i)]);
		$var(aemail) = $(avp(email)[$var(i)]);
		$avp($var(atype)) = $var(avalue);

		$var(anotify) = $(var(anotify){s.int});

		if($stat(alarm:$var(atype)) != NULL) {
			$var(thvalue) = $stat(alarm:$var(atype));
			$stat(alarm:$var(atype)) = 0;

			#If Alarm - go here
			if($var(thvalue) > $var(avalue)) {

				avp_db_query("INSERT INTO alarm_data (create_date, type, total, description) VALUES(NOW(), '$var(aname)', $var(thvalue), '$var(aname) - $var(atype)');");
				#Notify
				if($var(anotify) == 1) {
					route(SEND_ALARM);
				}
			}

			#Alarm for Scanner;
			if($var(atype) == "scanner") {
				avp_db_query("DELETE FROM alarm_data_mem WHERE type='scanner' AND total < $var(avalue)");
				if($var(anotify) == 1)
				{
					avp_db_query("SELECT * FROM alarm_data_mem WHERE type='scanner' AND total  >= $var(avalue) LIMIT 2", "$avp(as)");
					if($(avp(as){s.int}) > 0) {
						route(SEND_ALARM);
					}
				}
			}
		}

		$var(i) = $var(i) + 1;
	}

	avp_db_query("DELETE FROM alarm_data WHERE create_date < DATE_SUB(NOW(), INTERVAL 5 DAY)");
}

route[CHECK_STATS] {

	#SQL STATS
	$var(interval) = 5;
	$var(tm) = ($ctime(min) % $var(interval));

	if($var(tm) != 0) return;

	$var(t1) = $Ts;
	$var(t2) = $var(t1) - ($var(interval)*60);

	$var(t_date) = "FROM_UNIXTIME(" + $var(t1) + ", '%Y-%m-%d %H:%i:00')";
	$var(f_date) = "FROM_UNIXTIME(" + $var(t2) + ", '%Y-%m-%d %H:%i:00')";

	#ALARM SCANNERS
	avp_db_query("INSERT INTO alarm_data (create_date, type, total, source_ip, description) SELECT create_date, type, total, source_ip, description FROM alarm_data_mem;");
	avp_db_query("TRUNCATE TABLE alarm_data_mem");

	#STATS Useragent
	stat_iter_init("stats_useragent", "iter");
	while (stat_iter_next("$var(k)", "$var(v)", "iter")) {
		if ($var(v) != 0) {
			avp_db_query("INSERT INTO stats_useragent (from_date, to_date, useragent, method, total) \
				VALUES ($var(f_date), $var(t_date), '$(var(k){s.select,0,:})', \
					'$(var(k){s.select,1,:})', $var(v))");
			$stat(stats_useragent:$var(k)) = 0;
		}
	}

	#STATS IP
	stat_iter_init("stats_ip", "iter");
	while (stat_iter_next("$var(k)", "$var(v)", "iter")) {
		if ($var(v) != 0) {
			avp_db_query("INSERT INTO stats_ip (from_date, to_date, method, source_ip, total) \
				VALUES ($var(f_date), $var(t_date), '$(var(k){s.select,0,:})', \
					'$(var(k){s.select,1,:})', $var(v))");
			$stat(stats_ip:$var(k)) = 0;
		}
	}

	stat_iter_init("stats_geo", "iter");
	while (stat_iter_next("$var(k)", "$var(v)", "iter")) {
		if ($var(v) != 0) {
			avp_db_query("INSERT INTO stats_geo (from_date, to_date, method, country, total) \
				VALUES ($var(f_date), $var(t_date), '$(var(k){s.select,0,:})', \
					'$(var(k){s.select,1,:})', $var(v))");
			$stat(stats_ip:$var(k)) = 0;
		}
	}

	#INSERT SQL STATS
	#Packet HEP stats
	if($stat(packet:count) != NULL && $stat(packet:count) != 0) {
		avp_db_query("INSERT INTO stats_data (from_date, to_date, type, total) \
			VALUES ($var(f_date), $var(t_date), 'packet_count', $stat(packet:count))");
		$stat(packet:count) = 0;
	}
	if($stat(packet:size) != NULL && $stat(packet:size) != 0) {
		avp_db_query("INSERT INTO stats_data (from_date, to_date, type, total) \
			VALUES ($var(f_date), $var(t_date), 'packet_size', $stat(packet:size))");
		$stat(packet:size) = 0;
	}

	#SDF
	if($stat(stats:sdf) != NULL && $stat(stats:sdf) != 0) {
		avp_db_query("INSERT INTO stats_data (from_date, to_date, type, total) \
			VALUES ($var(f_date), $var(t_date), 'sdf', $stat(stats:sdf))");
		$stat(stats:sdf) = 0;;
	}

	#ISA
	if($stat(stats:isa) != NULL && $stat(stats:isa) != 0) {
		avp_db_query("INSERT INTO stats_data (from_date, to_date, type, total) \
			VALUES ($var(f_date), $var(t_date), 'isa', $stat(stats:isa))");
		$stat(stats:isa) = 0;;
	}

	#SD
	if($stat(stats:sd) != NULL && $stat(stats:sd) != 0) {
		avp_db_query("INSERT INTO stats_data (from_date, to_date, type, total) \
			VALUES ($var(f_date), $var(t_date), 'isa', $stat(stats:sd))");
		$stat(stats:sd) = 0;;
	}

	#SSR
	if($stat(stats:ssr) != NULL && $stat(stats:ssr) != 0) {
		avp_db_query("INSERT INTO stats_data (from_date, to_date, type, total) \
			VALUES ($var(f_date), $var(t_date), 'ssr', $stat(stats:ssr))");
		$stat(stats:ssr) = 0;;
	}

	#ASR
	$var(asr) = 0;
	$var(ner) = 0;
	if($stat(method:invite) != NULL && $stat(method:invite) > 0) {
		if ($stat(response:INVITE:407) == NULL) $stat(response:INVITE:407) = 0;
		if ($stat(response:INVITE:200) == NULL) $stat(response:INVITE:200) = 0;
		if ($stat(stats:bad-invite) == NULL) $stat(stats:bad-invite) = 0;

		$var(d) = $stat(method:invite) - $stat(response:INVITE:407);
		if($var(d) > 0) {
			$var(asr) =  $stat(response:INVITE:200) * 100 / $var(d);
			if($var(asr) > 100)  $var(asr) = 100;
			$var(ner) = ($stat(response:INVITE:200) + $stat(stats:bad-invite)) * 100 / $var(d);
			if($var(ner) > 100)  $var(ner) = 100;
		}
	}

	#Stats DATA
	avp_db_query("INSERT INTO stats_data (from_date, to_date, type, total) \
		VALUES ($var(f_date), $var(t_date), 'asr', $var(asr))");
	avp_db_query("INSERT INTO stats_data (from_date, to_date, type, total) \
		VALUES ($var(f_date), $var(t_date), 'ner', $var(ner))");
sleep("1");

	#INVITE
	stat_iter_init("method", "iter");
	while (stat_iter_next("$var(k)", "$var(v)", "iter")) {
		if ($var(v) != 0) {
			$var(reinvite) = $(var(k){s.select,1,:});
			if ($var(reinvite) == "")
				$var(reinvite) = 0;
			$var(auth) = $(var(k){s.select,2,:});
			if ($var(auth) == "")
				$var(auth) = 0;
			avp_db_query("INSERT INTO stats_method (from_date, to_date, method, totag, auth, total) \
				VALUES ($var(f_date), $var(t_date), '$(var(k){s.select,0,:})', \
					$var(reinvite), $var(auth), $var(v))");
			$stat(method:$var(k)) = 0;
		}
	}

	#RESPONSE
	stat_iter_init("response", "iter");
	while (stat_iter_next("$var(k)", "$var(v)", "iter")) {
		if ($var(v) != 0) {
			avp_db_query("INSERT INTO stats_method (from_date, to_date, method, cseq, total) \
				VALUES ($var(f_date), $var(t_date), '$(var(k){s.select,1,:})', \
					'$(var(k){s.select,0,:})', $var(v))");
			$stat(response:$var(k)) = 0;
		}
	}
}


route[STORE] {

	if($rm == "REGISTER") {
		$var(table) = "sip_capture_registration";
	}
	else if($rm =~ "(INVITE|UPDATE|BYE|ACK|PRACK|REFER|CANCEL)$")
	{
		$var(table) = "sip_capture_call";
	}
	else if($rm =~ "(NOTIFY)$" && is_present_hf("Event") && $hdr(Event)=~"refer;")
	{
		$var(table) = "sip_capture_call";
	}
	else if($rm =~ "(INFO)$")
	{
		$var(table) = "sip_capture_call";
	}
	else if($rm =~ "(OPTIONS)$" )
	{
		$var(table) = "sip_capture_rest";
	}
	else {
		$var(table) = "sip_capture_rest";
	}

	#$var(utc) = "%Y%m%d";
	if($var(table) == "sip_capture_call") sip_capture("sip_capture_call_%Y%m%d");
	else if($var(table) == "sip_capture_registration") sip_capture("sip_capture_registration_%Y%m%d");
	else sip_capture("sip_capture_rest_%Y%m%d");
}


route[my_hep_route] {

	### hep_get([data type,] chunk_id, vendor_id_pvar, chunk_data_pvar)
	### data type is optional for most of the generic chunks
	### Full list here: http://www.opensips.org/html/docs/modules/2.2.x/sipcapture#hep_set_id

	#Protocol ID
	hep_get("11", "$var(vid)", "$var(data)");

	$var(proto) = $(var(data){s.int});

	#Logs Or Stats
	if ($var(proto) == 86 || $var(proto) == 88 /* rest */) {

		#hep_set("uint8", "2", , "1");
		hep_get("utf8-string", "0x11", "$var(vid)", "$var(correlation_id)");
		report_capture("logs_capture", "$var(correlation_id)", "1");
		exit;
	}

	hep_resume_sip();

}
